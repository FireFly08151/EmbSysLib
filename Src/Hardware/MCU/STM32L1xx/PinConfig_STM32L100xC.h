//###################################################################
//
// DON'T EDIT!
//
// This file is auto generated by
//    >php -f PinConfig.php PinConfig_STM32L100.csv
//
//###################################################################


//*******************************************************************
#include "Mcu_Types.h"
#include "Std/Report.h"

//*******************************************************************
namespace EmbSysLib {
namespace Hw {

//*******************************************************************
/*!
\class PinConfig

\brief Port pin configuration

This class provides methods to
- configure GPIO mode, type, pull-up/-down, speed and alternate
  function
- connect a GPIO to an alternate function
*/
class PinConfig
{
  public:
    //---------------------------------------------------------------
    /*! \enum MODE
        \brief Pin mode configuration
    */
    typedef enum
    {
      // MODER
      INPUT          = 0x0000, //!< Input mode
      OUTPUT         = 0x0001, //!< Output mode
      ALTERNATE_FUNC = 0x0002, //!< Alternate function
      ANALOG         = 0x0003, //!< Analog I/O

      // OTYPER
      PUSH_PULL      = 0x0000, //!< Enable push-pull
      OPEN_DRAIN     = 0x0010, //!< Disable push-pull

      //PUPDR
      NO_PUPD        = 0x0000, //!< No pull-up or pull down
      PULL_UP        = 0x0100, //!< Enable pull-up
      PULL_DOWN      = 0x0200, //!< Enable pull-down

      //OSPEEDR
      LOW_SPEED      = 0x0000, //!< Low speed mode
      MEDIUM_SPEED   = 0x1000, //!< Medium speed mode
      FAST_SPEED     = 0x2000, //!< Fast speed mode
      HIGH_SPEED     = 0x3000  //!< High speed mode

    } MODE;

    //---------------------------------------------------------------
    /*! Alternate functions of the MCU
    */
    typedef enum
    { 
      ADC12_IN0,
      ADC12_IN1,
      ADC12_IN10,
      ADC12_IN11,
      ADC12_IN12,
      ADC12_IN13,
      ADC12_IN14,
      ADC12_IN15,
      ADC12_IN2,
      ADC12_IN3,
      ADC12_IN4,
      ADC12_IN5,
      ADC12_IN6,
      ADC12_IN7,
      ADC12_IN8,
      ADC12_IN9,
      DAC1_OUT,
      DAC2_OUT,
      I2C1_SCL,
      I2C1_SDA,
      I2C1_SMBA,
      I2C2_SCL,
      I2C2_SDA,
      I2C2_SMBA,
      I2S2_CK,
      I2S2_MCK,
      I2S2_SD,
      I2S2_WS,
      I2S3_CK,
      I2S3_MCK,
      I2S3_SD,
      I2S3_WS,
      LCD_COM0,
      LCD_COM1,
      LCD_COM2,
      LCD_COM3,
      LCD_COM4,
      LCD_COM5,
      LCD_COM6,
      LCD_COM7,
      LCD_SEG0,
      LCD_SEG1,
      LCD_SEG10,
      LCD_SEG11,
      LCD_SEG12,
      LCD_SEG13,
      LCD_SEG14,
      LCD_SEG15,
      LCD_SEG16,
      LCD_SEG17,
      LCD_SEG18,
      LCD_SEG19,
      LCD_SEG2,
      LCD_SEG20,
      LCD_SEG21,
      LCD_SEG22,
      LCD_SEG23,
      LCD_SEG24,
      LCD_SEG25,
      LCD_SEG26,
      LCD_SEG27,
      LCD_SEG28,
      LCD_SEG29,
      LCD_SEG3,
      LCD_SEG30,
      LCD_SEG31,
      LCD_SEG4,
      LCD_SEG5,
      LCD_SEG6,
      LCD_SEG7,
      LCD_SEG8,
      LCD_SEG9,
      RCC_MCO,
      RCC_OSC32_IN,
      RCC_OSC32_OUT,
      RCC_OSC_IN,
      RCC_OSC_OUT,
      RTC_OUT_ALARM,
      RTC_OUT_CALIB,
      RTC_REFIN,
      RTC_TAMP1,
      RTC_TAMP2,
      RTC_TS,
      SPI1_MISO,
      SPI1_MOSI,
      SPI1_NSS,
      SPI1_SCK,
      SPI2_MISO,
      SPI2_MOSI,
      SPI2_NSS,
      SPI2_SCK,
      SPI3_MISO,
      SPI3_MOSI,
      SPI3_NSS,
      SPI3_SCK,
      SYS_JTCK_SWCLK,
      SYS_JTDI,
      SYS_JTDO_TRACESWO,
      SYS_JTMS_SWDIO,
      SYS_JTRST,
      SYS_WKUP1,
      SYS_WKUP2,
      TIM10_CH1,
      TIM11_CH1,
      TIM2_CH1,
      TIM2_CH2,
      TIM2_CH3,
      TIM2_CH4,
      TIM3_CH1,
      TIM3_CH2,
      TIM3_CH3,
      TIM3_CH4,
      TIM3_ETR,
      TIM4_CH1,
      TIM4_CH2,
      TIM4_CH3,
      TIM4_CH4,
      TIM9_CH1,
      TIM9_CH2,
      TIMX_IC1,
      TIMX_IC2,
      TIMX_IC3,
      TIMX_IC4,
      USART1_CK,
      USART1_CTS,
      USART1_RTS,
      USART1_RX,
      USART1_TX,
      USART2_CK,
      USART2_CTS,
      USART2_RTS,
      USART2_RX,
      USART2_TX,
      USART3_CK,
      USART3_CTS,
      USART3_RTS,
      USART3_RX,
      USART3_TX,
      USB_DM,
      USB_DP,
    } Function;

    //---------------------------------------------------------------
    /*! Pin function mapping

        Maps an alternate function to a port pin and alternate function ID.
       'ADC12_IN4_PA4' means: The function 'ADC12_IN4' is mapped to pin PA4
    */
    typedef enum
    { 
      ADC12_IN0_PA0        = (ADC12_IN0           <<16)|( 0<<12)|( 0<<4)|( 0<<0), //!<\n
      ADC12_IN1_PA1        = (ADC12_IN1           <<16)|( 0<<12)|( 1<<4)|( 0<<0), //!<\n
      ADC12_IN10_PC0       = (ADC12_IN10          <<16)|( 2<<12)|( 0<<4)|( 0<<0), //!<\n
      ADC12_IN11_PC1       = (ADC12_IN11          <<16)|( 2<<12)|( 1<<4)|( 0<<0), //!<\n
      ADC12_IN12_PC2       = (ADC12_IN12          <<16)|( 2<<12)|( 2<<4)|( 0<<0), //!<\n
      ADC12_IN13_PC3       = (ADC12_IN13          <<16)|( 2<<12)|( 3<<4)|( 0<<0), //!<\n
      ADC12_IN14_PC4       = (ADC12_IN14          <<16)|( 2<<12)|( 4<<4)|( 0<<0), //!<\n
      ADC12_IN15_PC5       = (ADC12_IN15          <<16)|( 2<<12)|( 5<<4)|( 0<<0), //!<\n
      ADC12_IN2_PA2        = (ADC12_IN2           <<16)|( 0<<12)|( 2<<4)|( 0<<0), //!<\n
      ADC12_IN3_PA3        = (ADC12_IN3           <<16)|( 0<<12)|( 3<<4)|( 0<<0), //!<\n
      ADC12_IN4_PA4        = (ADC12_IN4           <<16)|( 0<<12)|( 4<<4)|( 0<<0), //!<\n
      ADC12_IN5_PA5        = (ADC12_IN5           <<16)|( 0<<12)|( 5<<4)|( 0<<0), //!<\n
      ADC12_IN6_PA6        = (ADC12_IN6           <<16)|( 0<<12)|( 6<<4)|( 0<<0), //!<\n
      ADC12_IN7_PA7        = (ADC12_IN7           <<16)|( 0<<12)|( 7<<4)|( 0<<0), //!<\n
      ADC12_IN8_PB0        = (ADC12_IN8           <<16)|( 1<<12)|( 0<<4)|( 0<<0), //!<\n
      ADC12_IN9_PB1        = (ADC12_IN9           <<16)|( 1<<12)|( 1<<4)|( 0<<0), //!<\n
      DAC1_OUT_PA4         = (DAC1_OUT            <<16)|( 0<<12)|( 4<<4)|( 0<<0), //!<\n
      DAC2_OUT_PA5         = (DAC2_OUT            <<16)|( 0<<12)|( 5<<4)|( 0<<0), //!<\n
      I2C1_SCL_PB6         = (I2C1_SCL            <<16)|( 1<<12)|( 6<<4)|( 4<<0), //!<\n
      I2C1_SCL_PB8         = (I2C1_SCL            <<16)|( 1<<12)|( 8<<4)|( 4<<0), //!<\n
      I2C1_SDA_PB7         = (I2C1_SDA            <<16)|( 1<<12)|( 7<<4)|( 4<<0), //!<\n
      I2C1_SDA_PB9         = (I2C1_SDA            <<16)|( 1<<12)|( 9<<4)|( 4<<0), //!<\n
      I2C1_SMBA_PB5        = (I2C1_SMBA           <<16)|( 1<<12)|( 5<<4)|( 4<<0), //!<\n
      I2C2_SCL_PB10        = (I2C2_SCL            <<16)|( 1<<12)|(10<<4)|( 4<<0), //!<\n
      I2C2_SDA_PB11        = (I2C2_SDA            <<16)|( 1<<12)|(11<<4)|( 4<<0), //!<\n
      I2C2_SMBA_PB12       = (I2C2_SMBA           <<16)|( 1<<12)|(12<<4)|( 4<<0), //!<\n
      I2S2_CK_PB13         = (I2S2_CK             <<16)|( 1<<12)|(13<<4)|( 5<<0), //!<\n
      I2S2_MCK_PC6         = (I2S2_MCK            <<16)|( 2<<12)|( 6<<4)|( 5<<0), //!<\n
      I2S2_SD_PB15         = (I2S2_SD             <<16)|( 1<<12)|(15<<4)|( 5<<0), //!<\n
      I2S2_WS_PB12         = (I2S2_WS             <<16)|( 1<<12)|(12<<4)|( 5<<0), //!<\n
      I2S3_CK_PB3          = (I2S3_CK             <<16)|( 1<<12)|( 3<<4)|( 6<<0), //!<\n
      I2S3_CK_PC10         = (I2S3_CK             <<16)|( 2<<12)|(10<<4)|( 6<<0), //!<\n
      I2S3_MCK_PC7         = (I2S3_MCK            <<16)|( 2<<12)|( 7<<4)|( 6<<0), //!<\n
      I2S3_SD_PB5          = (I2S3_SD             <<16)|( 1<<12)|( 5<<4)|( 6<<0), //!<\n
      I2S3_SD_PC12         = (I2S3_SD             <<16)|( 2<<12)|(12<<4)|( 6<<0), //!<\n
      I2S3_WS_PA15         = (I2S3_WS             <<16)|( 0<<12)|(15<<4)|( 6<<0), //!<\n
      I2S3_WS_PA4          = (I2S3_WS             <<16)|( 0<<12)|( 4<<4)|( 6<<0), //!<\n
      LCD_COM0_PA8         = (LCD_COM0            <<16)|( 0<<12)|( 8<<4)|(11<<0), //!<\n
      LCD_COM1_PA9         = (LCD_COM1            <<16)|( 0<<12)|( 9<<4)|(11<<0), //!<\n
      LCD_COM2_PA10        = (LCD_COM2            <<16)|( 0<<12)|(10<<4)|(11<<0), //!<\n
      LCD_COM3_PB9         = (LCD_COM3            <<16)|( 1<<12)|( 9<<4)|(11<<0), //!<\n
      LCD_COM4_PC10        = (LCD_COM4            <<16)|( 2<<12)|(10<<4)|(11<<0), //!<\n
      LCD_COM5_PC11        = (LCD_COM5            <<16)|( 2<<12)|(11<<4)|(11<<0), //!<\n
      LCD_COM6_PC12        = (LCD_COM6            <<16)|( 2<<12)|(12<<4)|(11<<0), //!<\n
      LCD_COM7_PD2         = (LCD_COM7            <<16)|( 3<<12)|( 2<<4)|(11<<0), //!<\n
      LCD_SEG0_PA1         = (LCD_SEG0            <<16)|( 0<<12)|( 1<<4)|(11<<0), //!<\n
      LCD_SEG1_PA2         = (LCD_SEG1            <<16)|( 0<<12)|( 2<<4)|(11<<0), //!<\n
      LCD_SEG10_PB10       = (LCD_SEG10           <<16)|( 1<<12)|(10<<4)|(11<<0), //!<\n
      LCD_SEG11_PB11       = (LCD_SEG11           <<16)|( 1<<12)|(11<<4)|(11<<0), //!<\n
      LCD_SEG12_PB12       = (LCD_SEG12           <<16)|( 1<<12)|(12<<4)|(11<<0), //!<\n
      LCD_SEG13_PB13       = (LCD_SEG13           <<16)|( 1<<12)|(13<<4)|(11<<0), //!<\n
      LCD_SEG14_PB14       = (LCD_SEG14           <<16)|( 1<<12)|(14<<4)|(11<<0), //!<\n
      LCD_SEG15_PB15       = (LCD_SEG15           <<16)|( 1<<12)|(15<<4)|(11<<0), //!<\n
      LCD_SEG16_PB8        = (LCD_SEG16           <<16)|( 1<<12)|( 8<<4)|(11<<0), //!<\n
      LCD_SEG17_PA15       = (LCD_SEG17           <<16)|( 0<<12)|(15<<4)|(11<<0), //!<\n
      LCD_SEG18_PC0        = (LCD_SEG18           <<16)|( 2<<12)|( 0<<4)|(11<<0), //!<\n
      LCD_SEG19_PC1        = (LCD_SEG19           <<16)|( 2<<12)|( 1<<4)|(11<<0), //!<\n
      LCD_SEG2_PA3         = (LCD_SEG2            <<16)|( 0<<12)|( 3<<4)|(11<<0), //!<\n
      LCD_SEG20_PC2        = (LCD_SEG20           <<16)|( 2<<12)|( 2<<4)|(11<<0), //!<\n
      LCD_SEG21_PC3        = (LCD_SEG21           <<16)|( 2<<12)|( 3<<4)|(11<<0), //!<\n
      LCD_SEG22_PC4        = (LCD_SEG22           <<16)|( 2<<12)|( 4<<4)|(11<<0), //!<\n
      LCD_SEG23_PC5        = (LCD_SEG23           <<16)|( 2<<12)|( 5<<4)|(11<<0), //!<\n
      LCD_SEG24_PC6        = (LCD_SEG24           <<16)|( 2<<12)|( 6<<4)|(11<<0), //!<\n
      LCD_SEG25_PC7        = (LCD_SEG25           <<16)|( 2<<12)|( 7<<4)|(11<<0), //!<\n
      LCD_SEG26_PC8        = (LCD_SEG26           <<16)|( 2<<12)|( 8<<4)|(11<<0), //!<\n
      LCD_SEG27_PC9        = (LCD_SEG27           <<16)|( 2<<12)|( 9<<4)|(11<<0), //!<\n
      LCD_SEG28_PC10       = (LCD_SEG28           <<16)|( 2<<12)|(10<<4)|(11<<0), //!<\n
      LCD_SEG29_PC11       = (LCD_SEG29           <<16)|( 2<<12)|(11<<4)|(11<<0), //!<\n
      LCD_SEG3_PA6         = (LCD_SEG3            <<16)|( 0<<12)|( 6<<4)|(11<<0), //!<\n
      LCD_SEG30_PC12       = (LCD_SEG30           <<16)|( 2<<12)|(12<<4)|(11<<0), //!<\n
      LCD_SEG31_PD2        = (LCD_SEG31           <<16)|( 3<<12)|( 2<<4)|(11<<0), //!<\n
      LCD_SEG4_PA7         = (LCD_SEG4            <<16)|( 0<<12)|( 7<<4)|(11<<0), //!<\n
      LCD_SEG5_PB0         = (LCD_SEG5            <<16)|( 1<<12)|( 0<<4)|(11<<0), //!<\n
      LCD_SEG6_PB1         = (LCD_SEG6            <<16)|( 1<<12)|( 1<<4)|(11<<0), //!<\n
      LCD_SEG7_PB3         = (LCD_SEG7            <<16)|( 1<<12)|( 3<<4)|(11<<0), //!<\n
      LCD_SEG8_PB4         = (LCD_SEG8            <<16)|( 1<<12)|( 4<<4)|(11<<0), //!<\n
      LCD_SEG9_PB5         = (LCD_SEG9            <<16)|( 1<<12)|( 5<<4)|(11<<0), //!<\n
      RCC_MCO_PA8          = (RCC_MCO             <<16)|( 0<<12)|( 8<<4)|( 0<<0), //!<\n
      RCC_OSC32_IN_PC14    = (RCC_OSC32_IN        <<16)|( 2<<12)|(14<<4)|( 0<<0), //!<\n
      RCC_OSC32_OUT_PC15   = (RCC_OSC32_OUT       <<16)|( 2<<12)|(15<<4)|( 0<<0), //!<\n
      RCC_OSC_IN_PH0       = (RCC_OSC_IN          <<16)|( 7<<12)|( 0<<4)|( 0<<0), //!<\n
      RCC_OSC_OUT_PH1      = (RCC_OSC_OUT         <<16)|( 7<<12)|( 1<<4)|( 0<<0), //!<\n
      RTC_OUT_ALARM_PC13   = (RTC_OUT_ALARM       <<16)|( 2<<12)|(13<<4)|( 0<<0), //!<\n
      RTC_OUT_CALIB_PC13   = (RTC_OUT_CALIB       <<16)|( 2<<12)|(13<<4)|( 0<<0), //!<\n
      RTC_REFIN_PB15       = (RTC_REFIN           <<16)|( 1<<12)|(15<<4)|( 0<<0), //!<\n
      RTC_TAMP1_PC13       = (RTC_TAMP1           <<16)|( 2<<12)|(13<<4)|( 0<<0), //!<\n
      RTC_TAMP2_PA0        = (RTC_TAMP2           <<16)|( 0<<12)|( 0<<4)|( 0<<0), //!<\n
      RTC_TS_PC13          = (RTC_TS              <<16)|( 2<<12)|(13<<4)|( 0<<0), //!<\n
      SPI1_MISO_PA11       = (SPI1_MISO           <<16)|( 0<<12)|(11<<4)|( 5<<0), //!<\n
      SPI1_MISO_PA6        = (SPI1_MISO           <<16)|( 0<<12)|( 6<<4)|( 5<<0), //!<\n
      SPI1_MISO_PB4        = (SPI1_MISO           <<16)|( 1<<12)|( 4<<4)|( 5<<0), //!<\n
      SPI1_MOSI_PA12       = (SPI1_MOSI           <<16)|( 0<<12)|(12<<4)|( 5<<0), //!<\n
      SPI1_MOSI_PA7        = (SPI1_MOSI           <<16)|( 0<<12)|( 7<<4)|( 5<<0), //!<\n
      SPI1_MOSI_PB5        = (SPI1_MOSI           <<16)|( 1<<12)|( 5<<4)|( 5<<0), //!<\n
      SPI1_NSS_PA15        = (SPI1_NSS            <<16)|( 0<<12)|(15<<4)|( 5<<0), //!<\n
      SPI1_NSS_PA4         = (SPI1_NSS            <<16)|( 0<<12)|( 4<<4)|( 5<<0), //!<\n
      SPI1_SCK_PA5         = (SPI1_SCK            <<16)|( 0<<12)|( 5<<4)|( 5<<0), //!<\n
      SPI1_SCK_PB3         = (SPI1_SCK            <<16)|( 1<<12)|( 3<<4)|( 5<<0), //!<\n
      SPI2_MISO_PB14       = (SPI2_MISO           <<16)|( 1<<12)|(14<<4)|( 5<<0), //!<\n
      SPI2_MOSI_PB15       = (SPI2_MOSI           <<16)|( 1<<12)|(15<<4)|( 5<<0), //!<\n
      SPI2_NSS_PB12        = (SPI2_NSS            <<16)|( 1<<12)|(12<<4)|( 5<<0), //!<\n
      SPI2_SCK_PB13        = (SPI2_SCK            <<16)|( 1<<12)|(13<<4)|( 5<<0), //!<\n
      SPI3_MISO_PB4        = (SPI3_MISO           <<16)|( 1<<12)|( 4<<4)|( 6<<0), //!<\n
      SPI3_MISO_PC11       = (SPI3_MISO           <<16)|( 2<<12)|(11<<4)|( 6<<0), //!<\n
      SPI3_MOSI_PB5        = (SPI3_MOSI           <<16)|( 1<<12)|( 5<<4)|( 6<<0), //!<\n
      SPI3_MOSI_PC12       = (SPI3_MOSI           <<16)|( 2<<12)|(12<<4)|( 6<<0), //!<\n
      SPI3_NSS_PA15        = (SPI3_NSS            <<16)|( 0<<12)|(15<<4)|( 6<<0), //!<\n
      SPI3_NSS_PA4         = (SPI3_NSS            <<16)|( 0<<12)|( 4<<4)|( 6<<0), //!<\n
      SPI3_SCK_PB3         = (SPI3_SCK            <<16)|( 1<<12)|( 3<<4)|( 6<<0), //!<\n
      SPI3_SCK_PC10        = (SPI3_SCK            <<16)|( 2<<12)|(10<<4)|( 6<<0), //!<\n
      SYS_JTCK_SWCLK_PA14  = (SYS_JTCK_SWCLK      <<16)|( 0<<12)|(14<<4)|( 0<<0), //!<\n
      SYS_JTDI_PA15        = (SYS_JTDI            <<16)|( 0<<12)|(15<<4)|( 0<<0), //!<\n
      SYS_JTDO_TRACESWO_PB3 = (SYS_JTDO_TRACESWO   <<16)|( 1<<12)|( 3<<4)|( 0<<0), //!<\n
      SYS_JTMS_SWDIO_PA13  = (SYS_JTMS_SWDIO      <<16)|( 0<<12)|(13<<4)|( 0<<0), //!<\n
      SYS_JTRST_PB4        = (SYS_JTRST           <<16)|( 1<<12)|( 4<<4)|( 0<<0), //!<\n
      SYS_WKUP1_PA0        = (SYS_WKUP1           <<16)|( 0<<12)|( 0<<4)|( 0<<0), //!<\n
      SYS_WKUP2_PC13       = (SYS_WKUP2           <<16)|( 2<<12)|(13<<4)|( 0<<0), //!<\n
      TIM10_CH1_PA6        = (TIM10_CH1           <<16)|( 0<<12)|( 6<<4)|( 3<<0), //!<\n
      TIM10_CH1_PB12       = (TIM10_CH1           <<16)|( 1<<12)|(12<<4)|( 3<<0), //!<\n
      TIM10_CH1_PB8        = (TIM10_CH1           <<16)|( 1<<12)|( 8<<4)|( 3<<0), //!<\n
      TIM11_CH1_PA7        = (TIM11_CH1           <<16)|( 0<<12)|( 7<<4)|( 3<<0), //!<\n
      TIM11_CH1_PB15       = (TIM11_CH1           <<16)|( 1<<12)|(15<<4)|( 3<<0), //!<\n
      TIM11_CH1_PB9        = (TIM11_CH1           <<16)|( 1<<12)|( 9<<4)|( 3<<0), //!<\n
      TIM2_CH1_PA0         = (TIM2_CH1            <<16)|( 0<<12)|( 0<<4)|( 1<<0), //!<\n
      TIM2_CH1_PA15        = (TIM2_CH1            <<16)|( 0<<12)|(15<<4)|( 1<<0), //!<\n
      TIM2_CH1_PA5         = (TIM2_CH1            <<16)|( 0<<12)|( 5<<4)|( 1<<0), //!<\n
      TIM2_CH2_PA1         = (TIM2_CH2            <<16)|( 0<<12)|( 1<<4)|( 1<<0), //!<\n
      TIM2_CH2_PB3         = (TIM2_CH2            <<16)|( 1<<12)|( 3<<4)|( 1<<0), //!<\n
      TIM2_CH3_PA2         = (TIM2_CH3            <<16)|( 0<<12)|( 2<<4)|( 1<<0), //!<\n
      TIM2_CH3_PB10        = (TIM2_CH3            <<16)|( 1<<12)|(10<<4)|( 1<<0), //!<\n
      TIM2_CH4_PA3         = (TIM2_CH4            <<16)|( 0<<12)|( 3<<4)|( 1<<0), //!<\n
      TIM2_CH4_PB11        = (TIM2_CH4            <<16)|( 1<<12)|(11<<4)|( 1<<0), //!<\n
      TIM3_CH1_PA6         = (TIM3_CH1            <<16)|( 0<<12)|( 6<<4)|( 2<<0), //!<\n
      TIM3_CH1_PB4         = (TIM3_CH1            <<16)|( 1<<12)|( 4<<4)|( 2<<0), //!<\n
      TIM3_CH1_PC6         = (TIM3_CH1            <<16)|( 2<<12)|( 6<<4)|( 2<<0), //!<\n
      TIM3_CH2_PA7         = (TIM3_CH2            <<16)|( 0<<12)|( 7<<4)|( 2<<0), //!<\n
      TIM3_CH2_PB5         = (TIM3_CH2            <<16)|( 1<<12)|( 5<<4)|( 2<<0), //!<\n
      TIM3_CH2_PC7         = (TIM3_CH2            <<16)|( 2<<12)|( 7<<4)|( 2<<0), //!<\n
      TIM3_CH3_PB0         = (TIM3_CH3            <<16)|( 1<<12)|( 0<<4)|( 2<<0), //!<\n
      TIM3_CH3_PC8         = (TIM3_CH3            <<16)|( 2<<12)|( 8<<4)|( 2<<0), //!<\n
      TIM3_CH4_PB1         = (TIM3_CH4            <<16)|( 1<<12)|( 1<<4)|( 2<<0), //!<\n
      TIM3_CH4_PC9         = (TIM3_CH4            <<16)|( 2<<12)|( 9<<4)|( 2<<0), //!<\n
      TIM3_ETR_PD2         = (TIM3_ETR            <<16)|( 3<<12)|( 2<<4)|( 2<<0), //!<\n
      TIM4_CH1_PB6         = (TIM4_CH1            <<16)|( 1<<12)|( 6<<4)|( 2<<0), //!<\n
      TIM4_CH2_PB7         = (TIM4_CH2            <<16)|( 1<<12)|( 7<<4)|( 2<<0), //!<\n
      TIM4_CH3_PB8         = (TIM4_CH3            <<16)|( 1<<12)|( 8<<4)|( 2<<0), //!<\n
      TIM4_CH4_PB9         = (TIM4_CH4            <<16)|( 1<<12)|( 9<<4)|( 2<<0), //!<\n
      TIM9_CH1_PA2         = (TIM9_CH1            <<16)|( 0<<12)|( 2<<4)|( 3<<0), //!<\n
      TIM9_CH1_PB13        = (TIM9_CH1            <<16)|( 1<<12)|(13<<4)|( 3<<0), //!<\n
      TIM9_CH2_PA3         = (TIM9_CH2            <<16)|( 0<<12)|( 3<<4)|( 3<<0), //!<\n
      TIM9_CH2_PB14        = (TIM9_CH2            <<16)|( 1<<12)|(14<<4)|( 3<<0), //!<\n
      TIMX_IC1_PA0         = (TIMX_IC1            <<16)|( 0<<12)|( 0<<4)|(14<<0), //!<\n
      TIMX_IC1_PA12        = (TIMX_IC1            <<16)|( 0<<12)|(12<<4)|(14<<0), //!<\n
      TIMX_IC1_PA4         = (TIMX_IC1            <<16)|( 0<<12)|( 4<<4)|(14<<0), //!<\n
      TIMX_IC1_PA8         = (TIMX_IC1            <<16)|( 0<<12)|( 8<<4)|(14<<0), //!<\n
      TIMX_IC1_PC0         = (TIMX_IC1            <<16)|( 2<<12)|( 0<<4)|(14<<0), //!<\n
      TIMX_IC1_PC12        = (TIMX_IC1            <<16)|( 2<<12)|(12<<4)|(14<<0), //!<\n
      TIMX_IC1_PC4         = (TIMX_IC1            <<16)|( 2<<12)|( 4<<4)|(14<<0), //!<\n
      TIMX_IC1_PC8         = (TIMX_IC1            <<16)|( 2<<12)|( 8<<4)|(14<<0), //!<\n
      TIMX_IC2_PA1         = (TIMX_IC2            <<16)|( 0<<12)|( 1<<4)|(14<<0), //!<\n
      TIMX_IC2_PA13        = (TIMX_IC2            <<16)|( 0<<12)|(13<<4)|(14<<0), //!<\n
      TIMX_IC2_PA5         = (TIMX_IC2            <<16)|( 0<<12)|( 5<<4)|(14<<0), //!<\n
      TIMX_IC2_PA9         = (TIMX_IC2            <<16)|( 0<<12)|( 9<<4)|(14<<0), //!<\n
      TIMX_IC2_PC1         = (TIMX_IC2            <<16)|( 2<<12)|( 1<<4)|(14<<0), //!<\n
      TIMX_IC2_PC13        = (TIMX_IC2            <<16)|( 2<<12)|(13<<4)|(14<<0), //!<\n
      TIMX_IC2_PC5         = (TIMX_IC2            <<16)|( 2<<12)|( 5<<4)|(14<<0), //!<\n
      TIMX_IC2_PC9         = (TIMX_IC2            <<16)|( 2<<12)|( 9<<4)|(14<<0), //!<\n
      TIMX_IC3_PA10        = (TIMX_IC3            <<16)|( 0<<12)|(10<<4)|(14<<0), //!<\n
      TIMX_IC3_PA14        = (TIMX_IC3            <<16)|( 0<<12)|(14<<4)|(14<<0), //!<\n
      TIMX_IC3_PA2         = (TIMX_IC3            <<16)|( 0<<12)|( 2<<4)|(14<<0), //!<\n
      TIMX_IC3_PA6         = (TIMX_IC3            <<16)|( 0<<12)|( 6<<4)|(14<<0), //!<\n
      TIMX_IC3_PC10        = (TIMX_IC3            <<16)|( 2<<12)|(10<<4)|(14<<0), //!<\n
      TIMX_IC3_PC14        = (TIMX_IC3            <<16)|( 2<<12)|(14<<4)|(14<<0), //!<\n
      TIMX_IC3_PC2         = (TIMX_IC3            <<16)|( 2<<12)|( 2<<4)|(14<<0), //!<\n
      TIMX_IC3_PC6         = (TIMX_IC3            <<16)|( 2<<12)|( 6<<4)|(14<<0), //!<\n
      TIMX_IC3_PD2         = (TIMX_IC3            <<16)|( 3<<12)|( 2<<4)|(14<<0), //!<\n
      TIMX_IC4_PA11        = (TIMX_IC4            <<16)|( 0<<12)|(11<<4)|(14<<0), //!<\n
      TIMX_IC4_PA15        = (TIMX_IC4            <<16)|( 0<<12)|(15<<4)|(14<<0), //!<\n
      TIMX_IC4_PA3         = (TIMX_IC4            <<16)|( 0<<12)|( 3<<4)|(14<<0), //!<\n
      TIMX_IC4_PA7         = (TIMX_IC4            <<16)|( 0<<12)|( 7<<4)|(14<<0), //!<\n
      TIMX_IC4_PC11        = (TIMX_IC4            <<16)|( 2<<12)|(11<<4)|(14<<0), //!<\n
      TIMX_IC4_PC15        = (TIMX_IC4            <<16)|( 2<<12)|(15<<4)|(14<<0), //!<\n
      TIMX_IC4_PC3         = (TIMX_IC4            <<16)|( 2<<12)|( 3<<4)|(14<<0), //!<\n
      TIMX_IC4_PC7         = (TIMX_IC4            <<16)|( 2<<12)|( 7<<4)|(14<<0), //!<\n
      USART1_CK_PA8        = (USART1_CK           <<16)|( 0<<12)|( 8<<4)|( 7<<0), //!<\n
      USART1_CTS_PA11      = (USART1_CTS          <<16)|( 0<<12)|(11<<4)|( 7<<0), //!<\n
      USART1_RTS_PA12      = (USART1_RTS          <<16)|( 0<<12)|(12<<4)|( 7<<0), //!<\n
      USART1_RX_PA10       = (USART1_RX           <<16)|( 0<<12)|(10<<4)|( 7<<0), //!<\n
      USART1_RX_PB7        = (USART1_RX           <<16)|( 1<<12)|( 7<<4)|( 7<<0), //!<\n
      USART1_TX_PA9        = (USART1_TX           <<16)|( 0<<12)|( 9<<4)|( 7<<0), //!<\n
      USART1_TX_PB6        = (USART1_TX           <<16)|( 1<<12)|( 6<<4)|( 7<<0), //!<\n
      USART2_CK_PA4        = (USART2_CK           <<16)|( 0<<12)|( 4<<4)|( 7<<0), //!<\n
      USART2_CTS_PA0       = (USART2_CTS          <<16)|( 0<<12)|( 0<<4)|( 7<<0), //!<\n
      USART2_RTS_PA1       = (USART2_RTS          <<16)|( 0<<12)|( 1<<4)|( 7<<0), //!<\n
      USART2_RX_PA3        = (USART2_RX           <<16)|( 0<<12)|( 3<<4)|( 7<<0), //!<\n
      USART2_TX_PA2        = (USART2_TX           <<16)|( 0<<12)|( 2<<4)|( 7<<0), //!<\n
      USART3_CK_PB12       = (USART3_CK           <<16)|( 1<<12)|(12<<4)|( 7<<0), //!<\n
      USART3_CK_PC12       = (USART3_CK           <<16)|( 2<<12)|(12<<4)|( 7<<0), //!<\n
      USART3_CTS_PB13      = (USART3_CTS          <<16)|( 1<<12)|(13<<4)|( 7<<0), //!<\n
      USART3_RTS_PB14      = (USART3_RTS          <<16)|( 1<<12)|(14<<4)|( 7<<0), //!<\n
      USART3_RX_PB11       = (USART3_RX           <<16)|( 1<<12)|(11<<4)|( 7<<0), //!<\n
      USART3_RX_PC11       = (USART3_RX           <<16)|( 2<<12)|(11<<4)|( 7<<0), //!<\n
      USART3_TX_PB10       = (USART3_TX           <<16)|( 1<<12)|(10<<4)|( 7<<0), //!<\n
      USART3_TX_PC10       = (USART3_TX           <<16)|( 2<<12)|(10<<4)|( 7<<0), //!<\n
      USB_DM_PA11          = (USB_DM              <<16)|( 0<<12)|(11<<4)|(10<<0), //!<\n
      USB_DP_PA12          = (USB_DP              <<16)|( 0<<12)|(12<<4)|(10<<0), //!<\n
      END_OF_TABLE = -1
    } MAP;

  public:
    //---------------------------------------------------------------
    /*! Set configuration of a GPIO
        \param gpio  Pointer to function register.
                     Use predefined constant \a 'GPIOx'
        \param pinId GPIO pin number (0,...15)
        \param mode  Selected pin mode.
                     Use constants defined in \b MODE, the constants
                     can be combined using bit-or operations.
        \param af    Number of selected alternate function. This
                     parameter is used only, when \b ALTERNATE_FUNC
                     is selected.
    */
    static void set( GPIO_TypeDef *gpio,
                     BYTE          pinId,
                     DWORD         mode,
                     BYTE          af = 0 );

    //---------------------------------------------------------------
    /*! Set GPIO to alternate function

        A GPIO can be connected to a onchip peripheral module. The
        enum \b 'Function' lists all peripheral signals which can be
        connected to a GPIO. This method uses a application specific
        mapping \b 'table'. The application has to define
        this \b 'table' on global scope. The entries of this table
        define on which port pin a peripheral signal is mapped.
        \param func  Selected peripheral signal as alternate function
        \param mode  Selected pin mode.
                     Use constants defined in \b MODE, the constants
                     can be combined using bit-or operations.
        \return
                - true, if \b func is included in \b table
                - false otherwise
    */
    static bool set( Function func,
                     DWORD    mode = 0 );

  public:
    //---------------------------------------------------------------
    /*! This table defines how an alternate function is mapped to the
        port pins. It must be defined by application software. The
        last entry of this table has to be \b 'END_OF_TABLE'.
    */
    static MAP table[];
    static Std::Report report;

}; //PinConfig

}  } //namespace
